@implements IDisposable

@inject NavigationManager NavigationManager

<nav>
    <a href="/" class="logo">Hotel_reservation</a>
    <div class="nav-links">
        <div><NavLink href="/"><button class="nav-item">Home</button></NavLink></div>
        <div><NavLink href="/rooms"><button class="nav-item">Rooms</button></NavLink></div>
        <div><NavLink href="/room-template-config"><button class="nav-item">Configure Templates</button></NavLink></div>
        <div><NavLink href="/tag-config"><button class="nav-item">Configure Tags</button></NavLink></div>
        <div><NavLink href="/room-config"><button class="nav-item">Configure Rooms</button></NavLink></div>
        <div><NavLink href="/image-config"><button class="nav-item">Configure Images</button></NavLink></div>
        <div><NavLink href="/auth"><button class="nav-item">Auth Required</button></NavLink></div>
        <AuthorizeView>
            <Authorized>
                <div><NavLink href="/Account/Manage"><button class="nav-item">@context.User.Identity?.Name</button></NavLink></div>
                <div>
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-item">Logout</button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div><NavLink href="/Account/Register"><button class="nav-item">Register</button></NavLink></div>
                <div><NavLink href="/Account/Login"><button class="nav-item">Login</button></NavLink></div>
            </NotAuthorized>
        </AuthorizeView>
        <div><NavLink href="/about"><button class="nav-item">About us</button></NavLink></div>
    </div>
</nav>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
