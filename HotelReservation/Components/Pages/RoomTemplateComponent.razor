@rendermode InteractiveServer
@using HotelReservation.Components.Models
@using HotelReservation.Data
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations.Schema

<form>
    <div>
        <label for="name">Name</label>
        <input type="text" id="name" name="name" placeholder="(required)" @bind="Template.Name" required />
    </div>
    <div>
        <label for="dbeds">Adults</label>
        <input type="number" id="adults" name="adults" placeholder="(required)" @bind="Template.Adults" required />
    </div>
    <div>
        <label for="sbeds">Kids</label>
        <input type="number" id="kids" name="kids" placeholder="(required)" @bind="Template.Kids" required />
    </div>
    <div>
        <label for="price">Price per Night</label>
        <input type="number" id="price" name="price" placeholder="(required)" @bind="Template.NightlyPrice" required />
    </div>

    <div>
        <label>Tags</label>
        @foreach (var templateTag in Template.Tags)
        {
            <div>
                @templateTag.Name
                <button type="button" @onclick=@(() => DeleteTag(templateTag))>&#x2716;</button>
            </div>
        }
            <div>
                <select type="text" id="new-tag" @bind="_newTag.Name" @bind:after="SaveTag">
                    <option value="">-- Add New Tag --</option>
                    @foreach (var tag in _tags)
                    {
                        <option value="@tag.Name">@tag.Name</option>
                    }
                </select>
            </div>
        @if (!string.IsNullOrEmpty(TagErrorMessage))
        {
            <div class="text-danger">@TagErrorMessage</div>
        }
    </div>

    <div>
        <button type="button" @onclick="() => _imageSelection = true">Select Image</button>
        @if (_imageSelection)
        {
            <ImageSelectComponent OnSave="AddImage" OnCancel="() => _imageSelection = false" CurrentImages="Template.Images" />
        }
        @foreach (var image in Template.Images)
        {
            <div>
                <img src="@image.Path" style="width:100px; height:100px;" />
                <button type="button" @onclick="() => RemoveImage(image)">X</button>
            </div>
        }
    </div>
    <div>
        <label for="desc">Description</label>
        <input type="text" id="desc" name="desc" placeholder="(optional)" @bind="Template.Description" />
    </div>
    @if (Mode != null)
    {
        <input type="button" @onclick="Save" id="submit" value="@Mode" disabled="@InvalidTag" />
    }
</form>

@code {
    [Parameter] public required RoomTemplate Template { get; set; }
    [Parameter] public Func<Task<List<Tag>>> Tags { get; set; }
    [Parameter] public required string? Mode { get; set; }
    [Parameter] public EventCallback<RoomTemplate> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    private List<Tag> _tags = new();
    private Tag? _newTag = new Tag { Name = "" };
    private bool _imageSelection = false;
    private string TagErrorMessage = "";
    private bool InvalidTag => !string.IsNullOrEmpty(TagErrorMessage);

    protected override async Task OnInitializedAsync()
    {
        _tags = await Tags.Invoke();
        foreach (var templateTag in Template.Tags)
        {
            _tags.Remove(templateTag);
        }
    }

    private void DeleteTag(Tag tag)
    {
        Template.Tags.Remove(tag);
        _tags.Add(tag);
        if (!Template.Tags.Any(t => string.IsNullOrWhiteSpace(t.Name) || !_tags.Any(valid => valid.Name == t.Name)))
        {
            TagErrorMessage = "";
        }
    }
    private void SaveTag()
    {
        if (_newTag == null || string.IsNullOrEmpty(_newTag.Name))
        {
            TagErrorMessage = "Please enter a tag.";
        }else
        {
            _newTag = _tags.Find(t => t.Name == _newTag.Name);
            Template.Tags.Add(_newTag);
            _tags.Remove(_newTag);
            TagErrorMessage = "";
            _newTag = new Tag { Name = "" };
        }

    }

    private async Task AddImage(Image image)
    {
        Template.Images.Add(image);
        await InvokeAsync(StateHasChanged);
    }

    private void RemoveImage(Image image) => Template.Images.Remove(image);

    private void ValidateTag(Tag tag)
    {
        var validTag = _tags.FirstOrDefault(t => t.Name == tag.Name);
        if (string.IsNullOrWhiteSpace(tag.Name) || validTag == null || Template.Tags.Any(t => t.Id == validTag.Id))
        {
            tag.Id = 0;
            TagErrorMessage = "Invalid tag. Please select a valid tag from the list. No duplicates.";
            return;
        }
        else
        {
            TagErrorMessage = "";
        }
        // tag.SelectedTagName = validTag.Name;
    }

    private async Task Save(MouseEventArgs e)
    {
        await OnSave.InvokeAsync(Template);
    }
}