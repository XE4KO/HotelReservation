@page "/config/images"
@layout ConfigLayout
@using HotelReservation.Components.Models
@using HotelReservation.Components.Pages.Configs.Components
@using HotelReservation.Data
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext;
@inject IWebHostEnvironment Env

<h3>Images</h3>
<div class="container row">
    @if (!isLoading)
    {
        <div class="col-12 mb-4">
            <ImageComponent OnSave="AddImageAsync" Image="NewImage()" />
        </div>
        <div class="row g-3">
            @foreach (var image in savedImages)
            {
                <div class="col-3 col-md-3 col-lg-3">
                    <div class="card h-100 border-0 image-card d-flex flex-column">
                        <img src="@image.Path" class="img-fluid" alt="Image" />
                        <div class="card-body d-flex flex-column p-0 pt-2">
                            <button class="btn btn-danger mt-auto w-100" @onclick="() => DeleteImageAsync(image)">&#x2716;</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="col-12">
            <span>Loading...</span>
        </div>
    }
</div>

@code {
    private Image NewImage() => new Image() { Path = "" };
    private List<Image> savedImages = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        savedImages = await DbContext.Images.ToListAsync();
        isLoading = false;
    }
    private async Task AddImageAsync(Image image)
    {
        await DbContext.Images.AddAsync(image);
        await DbContext.SaveChangesAsync();
        savedImages.Add(image);
        StateHasChanged();
    }
    private async Task DeleteImageAsync(Image image)
    {
        File.Delete($"{Env.WebRootPath}{image.Path}");
        DbContext.Images.Remove(image);
        await DbContext.SaveChangesAsync();
        savedImages.Remove(image);
        StateHasChanged();
    }
}
