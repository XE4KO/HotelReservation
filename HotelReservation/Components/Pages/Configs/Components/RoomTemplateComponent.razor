@rendermode InteractiveServer
@using HotelReservation.Components.Models
@using HotelReservation.Data
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations.Schema

<form class=" mt-4">
    <div class="form-floating mb-3">
        <input type="text" class="form-control" id="name" name="name" placeholder="(required)" @bind="Template.Name" required />
        <label for="name">Name</label>
    </div>

    <div class="form-floating mb-3">
        <input type="number" class="form-control" id="adults" name="adults" placeholder="(required)" @bind="Template.Adults" required />
        <label for="adults">Adults</label>
    </div>

    <div class="form-floating mb-3">
        <input type="number" class="form-control" id="kids" name="kids" placeholder="(required)" @bind="Template.Kids" required />
        <label for="kids">Kids</label>
    </div>

    <div class="form-floating mb-3">
        <input type="number" class="form-control" id="price" name="price" placeholder="(required)" @bind="Template.NightlyPrice" required />
        <label for="price">Price per Night</label>
    </div>

    <div class="mb-3">
        <label>Tags</label>
        @foreach (var templateTag in Template.Tags)
        {
            <div class="d-flex justify-content-between align-items-center mb-2">
                <span>@templateTag.Name</span>
                <button type="button" class="btn btn-sm btn-danger" @onclick="@(() => DeleteTag(templateTag))">&#x2716;</button>
            </div>
        }

        <div class="input-group mb-3">
            <select class="form-select" id="new-tag" @bind="newTag.Name" @bind:after="SaveTag">
                <option value="">-- Add New Tag --</option>
                @foreach (var tag in tags)
                {
                    <option value="@tag.Name">@tag.Name</option>
                }
            </select>
        </div>

        @if (!string.IsNullOrEmpty(tagErrorMessage))
        {
            <div class="text-danger">@tagErrorMessage</div>
        }
    </div>

    <div class="mb-3">
        <button type="button" class="btn btn-secondary" @onclick="() => imageSelection = true">Select Image</button>

        @if (imageSelection)
        {
            <ImageSelectComponent OnSave="AddImage" OnCancel="() => imageSelection = false" CurrentImages="Template.Images" />
        }

        @foreach (var image in Template.Images)
        {
            <div class="d-inline-block position-relative mb-3 me-2">
                <img src="@image.Path" class="rounded template-image" />
                <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0" @onclick="() => RemoveImage(image)">X</button>
            </div>
        }
    </div>

    <div class="form-floating mb-3">
        <input type="text" class="form-control" id="desc" name="desc" placeholder="(optional)" @bind="Template.Description" />
        <label for="desc">Description</label>
    </div>

    @if (Mode != null)
    {
        <div class="mb-3">
            <input type="button" class="w-100 btn btn-lg btn-primary" @onclick="Save" id="submit" value="@Mode" disabled="@invalidTag" />
        </div>
    }
</form>


@code {
    [Parameter] public required RoomTemplate Template { get; set; }
    [Parameter] public Func<Task<List<Tag>>> Tags { get; set; }
    [Parameter] public required string? Mode { get; set; }
    [Parameter] public EventCallback<RoomTemplate> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    private List<Tag> tags = new();
    private Tag? newTag = new Tag { Name = "" };
    private bool imageSelection = false;
    private string tagErrorMessage = "";
    private bool invalidTag => !string.IsNullOrEmpty(tagErrorMessage);

    protected override async Task OnInitializedAsync()
    {
        tags = await Tags.Invoke();
        foreach (var templateTag in Template.Tags)
        {
            tags.Remove(templateTag);
        }
    }

    private void DeleteTag(Tag tag)
    {
        Template.Tags.Remove(tag);
        tags.Add(tag);
        if (!Template.Tags.Any(t => string.IsNullOrWhiteSpace(t.Name) || !tags.Any(valid => valid.Name == t.Name)))
        {
            tagErrorMessage = "";
        }
    }
    private void SaveTag()
    {
        if (newTag == null || string.IsNullOrEmpty(newTag.Name))
        {
            tagErrorMessage = "Please enter a tag.";
        }else
        {
            newTag = tags.Find(t => t.Name == newTag.Name);
            Template.Tags.Add(newTag);
            tags.Remove(newTag);
            tagErrorMessage = "";
            newTag = new Tag { Name = "" };
        }

    }

    private async Task AddImage(Image image)
    {
        Template.Images.Add(image);
        await InvokeAsync(StateHasChanged);
    }

    private void RemoveImage(Image image) => Template.Images.Remove(image);

    private void ValidateTag(Tag tag)
    {
        var validTag = tags.FirstOrDefault(t => t.Name == tag.Name);
        if (string.IsNullOrWhiteSpace(tag.Name) || validTag == null || Template.Tags.Any(t => t.Id == validTag.Id))
        {
            tag.Id = 0;
            tagErrorMessage = "Invalid tag. Please select a valid tag from the list. No duplicates.";
            return;
        }
        else
        {
            tagErrorMessage = "";
        }
        // tag.SelectedTagName = validTag.Name;
    }

    private async Task Save(MouseEventArgs e)
    {
        await OnSave.InvokeAsync(Template);
    }
}