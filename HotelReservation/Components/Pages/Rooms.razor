@page "/rooms"
@rendermode InteractiveServer
@using HotelReservation.Components.Models
@using HotelReservation.Components.Pages.Configs.Components
@using HotelReservation.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext;
@inject NavigationManager Navigation

<div class="container mt-4">
    <h3 class="mb-4">Reserve a Room</h3>

    <div class="row g-3 mb-4">
        <div class="col-md-2">
            <label for="adults" class="form-label">Adults</label>
            <input type="number" id="adults" @bind-value="adultsFilter" min="0" class="form-control" />
        </div>
        <div class="col-md-2">
            <label for="kids" class="form-label">Kids</label>
            <input type="number" id="kids" @bind-value="kidsFilter" min="0" class="form-control" />
        </div>
        <div class="col-md-3">
            <label for="reservation-start" class="form-label">From</label>
            <input type="date" id="reservation-start" @bind="reservationBegin" min="@DateTime.Today.AddDays(1).ToString("yyyy-MM-dd")" class="form-control" />
        </div>
        <div class="col-md-3">
            <label for="reservation-end" class="form-label">Until</label>
            <input type="date" id="reservation-end" @bind-value="reservationEnd" min="@reservationBegin.AddDays(1).ToString("yyyy-MM-dd")" class="form-control" />
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button type="button" @onclick="() => Filter()" class="btn btn-primary w-100">Search</button>
        </div>
    </div>

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-4">
        @foreach (var room in filteredRooms)
        {
            <div class="col">
                <div class="card h-100 shadow-sm">
                    <div style="height: 180px; overflow: hidden;" class="bg-light d-flex align-items-center justify-content-center">
                        <ImageCarousel Images="room.Images.ToList()" />
                    </div>
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@room.Name</h5>
                        <p class="card-text mb-1">Adult Beds: @room.Adults</p>
                        <p class="card-text mb-1">Kid Beds: @room.Kids</p>
                        <p class="card-text mb-1">Nightly Price: $@room.NightlyPrice</p>
                        @if (room.Tags?.Any() == true)
                        {
                            <div class="mb-2">
                                @foreach (var tag in room.Tags)
                                {
                                    <span class="badge bg-secondary me-1">@tag.Name</span>
                                }
                            </div>
                        }
                        @if (!string.IsNullOrWhiteSpace(room.Description))
                        {
                            <div class="card-text mb-3 description-box">
                                <p title="@room.Description">@room.Description</p>
                            </div>
                        }
                        <div class="mt-auto">
                            <button type="button" @onclick="() => SelectRoom(room.Id, adultsFilter, kidsFilter, reservationBegin, reservationEnd, room.NightlyPrice)" class="btn btn-success w-100">
                                Reserve Now
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<RoomTemplate>? roomTypes = new();
    private List<RoomTemplate>? filteredRooms = new();
    private int adultsFilter;
    private int kidsFilter;
    private DateTime reservationBegin = DateTime.Today.AddDays(1);
    private DateTime reservationEnd = DateTime.Today.AddDays(2);

    protected override async Task OnInitializedAsync()
    {
        roomTypes = await DbContext.RoomTemplates
            .Include(t => t.Tags)
            .Include(t => t.Images)
            .Include(t => t.Rooms).ThenInclude(r => r.Reservations)
            .ToListAsync();
        var uri = Navigation.Uri;
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(uri).Query);
        if (queryParams.ContainsKey("adults"))
            adultsFilter = int.Parse(queryParams["adults"]);
        if (queryParams.ContainsKey("kids"))
            kidsFilter = int.Parse(queryParams["kids"]);
        if (queryParams.ContainsKey("start"))
            reservationBegin = DateTime.Parse(queryParams["start"]);
        if (queryParams.ContainsKey("end"))
            reservationEnd = DateTime.Parse(queryParams["end"]);

        await base.OnInitializedAsync();
        Filter();
    }

    private void Filter()
    {
        if (adultsFilter > 0 && roomTypes.Any(t => t.Rooms != null && t.Rooms.Count() > 0))
        {
            filteredRooms = roomTypes.FindAll(t => t.Adults - adultsFilter >= 0 && t.Kids + t.Adults - (kidsFilter + adultsFilter) >= 0);
            filteredRooms = filteredRooms.FindAll(t =>
                t.Rooms.Any(r =>
                    !r.Reservations.Any(res =>
                    (reservationBegin >= res.Begin && reservationBegin < res.End) ||
                    (reservationEnd > res.Begin && reservationEnd <= res.End) ||
                    (reservationBegin < res.Begin && reservationEnd > res.End))));
        }
        else
        {
            filteredRooms = new();
        }
    }
    private void SelectRoom(int roomId, int adults, int kids, DateTime start, DateTime end, int nightlyPrice)
    {
        string url = $"/reservation?room={roomId}&adults={adults}&kids={kids}&start={start:yyyy-MM-dd}&end={end:yyyy-MM-dd}&price={nightlyPrice * (end - start).TotalDays}";
        Navigation.NavigateTo(url);
    }
}
