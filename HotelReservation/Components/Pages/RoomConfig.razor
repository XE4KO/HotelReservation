@page "/room-config"
@using HotelReservation.Components.Models
@using HotelReservation.Data
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext;

<h3>Rooms</h3>
<br>
@if (!isLoading)
{
<RoomTemplateSelectComponent OnChange="x => selectedTemplate = x" RoomTemplates="roomTemplates">
	<label for="type">Type</label>
</RoomTemplateSelectComponent>
<button @onclick="() => AddNewFloorAsync()">Floor+</button>
@foreach (var floor in rooms)
{
	<div>
		<span>|</span><label>@floor.Key</label><span>|</span>
		@foreach (var room in floor)
		{
			if (editingRoom && editRoom == room)
			{
				<input @bind-value="room.Number" />
				<RoomTemplateSelectComponent OnChange="x => room.Type = x" RoomTemplates="roomTemplates" />
			}else
			{
				<label>@room.Number</label>
				<label>@room.Type.Name</label>
			}
				<button @onclick="() => DeleteRoomAsync(room)">&#x2716;</button>
				<button @onclick="() => EditRoomAsync(room)">&#x270E;</button>
			<span>|</span>
		}
			<button @onclick="() => AddNewRoomAsync(floor.Key)">&#x271A;</button>
	</div>
}
}else{
	<span>Loading...</span>
}

@code {
	private bool editingRoom;
	private Room? editRoom;
	private List<RoomTemplate> roomTemplates = new();
	private RoomTemplate? selectedTemplate;
	private List<IGrouping<int, Room>> rooms = new();
	private bool isLoading = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await RefreshAsync();
			isLoading = false;
			StateHasChanged();
		}
		await base.OnAfterRenderAsync(firstRender);
	}
	private async Task<Room> NewFloorRoomAsync()
	{
		int newFloor = await GetNewFloorAsync();
		return new Room { Floor = newFloor, Number = 1, Type = selectedTemplate };
	}
	private async Task RefreshRoomsAsync()
	{
		rooms = await DbContext.Rooms
			.OrderBy(room => room.Floor)
			.ThenBy(room => room.Number)
			.GroupBy(room => room.Floor)
			.ToListAsync();
	}
	private async Task DeleteRoomAsync(Room room)
	{
		DbContext.Rooms.Remove(room);
		await DbContext.SaveChangesAsync();
		await RefreshRoomsAsync();
	}
	private async Task<int> GetNewFloorAsync()
	{
		if (!await DbContext.Rooms.AnyAsync())
			return 1;
		else
			return (await DbContext.Rooms.MaxAsync(room => room.Floor)) + 1;
	}
	private async Task<int> GetNewRoomNumberAsync(int floor)
	{
		var roomNumbers = await DbContext.Rooms
		.Where(room => room.Floor == floor)
		.Select(room => room.Number)
		.ToListAsync();
		return roomNumbers.Max() + 1;
	}
	private async Task AddNewFloorAsync(){
		await AddRoomAsync(await NewFloorRoomAsync());
	}
	private async Task AddNewRoomAsync(int floor)
	{
		int newNumber = await GetNewRoomNumberAsync(floor);
		await AddRoomAsync(new Room() { Floor = floor, Number = newNumber, Type = selectedTemplate });
		await RefreshAsync();
	}
	private async Task AddRoomAsync(Room room)
	{
		await DbContext.Rooms.AddAsync(room);
		await DbContext.SaveChangesAsync();
		await RefreshAsync();
	}
	private async Task RefreshTemplatesAsync()
		=> roomTemplates = await GetAllRoomTemplatesAsync();
	private Task<List<RoomTemplate>> GetAllRoomTemplatesAsync()
		=> DbContext.RoomTemplates.ToListAsync();
	private async Task RefreshAsync(){
		await RefreshTemplatesAsync();
		await RefreshRoomsAsync();
	}
	private void EditRoomAsync(Room room)
	{
		if (editingRoom && editRoom == room)
		{
			editingRoom = false;
			editRoom = null;

		}else
		{
			editingRoom = true;
			editRoom = room;
		}
		StateHasChanged();
	}
}
