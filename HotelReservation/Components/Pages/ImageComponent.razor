@using HotelReservation.Components.Models
@using HotelReservation.Data
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject IWebHostEnvironment Env

<div>
    <label for="image">Select Image</label>
    <InputFile id="image" OnChange="@UpdateImagePath" MaxFileSize="10485760" style="color:transparent" accept=".JPG, .JPEG, .JPE, .BMP, .GIF, .PNG" required />
</div>
<div>
    @if (selectedFile != null && !string.IsNullOrEmpty(selectedFile.Name))
    {
        <p>Selected File: @selectedFile.Name</p>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p style="color: red;">@errorMessage</p>
    }
</div>
<div>
    @if (!string.IsNullOrEmpty(Image.Path))
    {
        <img id="selected-image" src="@Image.Path" width="500" height="500" />
    }
</div>
<div>
    <button type="submit" @onclick="Save" disabled="@InvalidImage">Add</button>
</div>

@code {
    [Parameter] public required Image Image { get; set; }
    [Parameter] public EventCallback<Image> OnSave { get; set; }
    private readonly string[] allowedExtensions = { ".jpg", ".jpeg", ".bmp", ".gif", ".png" };
    private IBrowserFile? selectedFile;
    private string filePath = "";
    private string fileName = "";
    private string errorMessage = "Please select an image.";

    private bool InvalidImage => !string.IsNullOrEmpty(errorMessage);
    private async Task UpdateImagePath(InputFileChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(filePath))
        {
            File.Delete(filePath);
        }
        selectedFile = e.File;

        if (selectedFile != null)
        {
            errorMessage = "";  
            var extension = Path.GetExtension(selectedFile.Name).ToLower();
            if (!allowedExtensions.Contains(extension))
            {
                errorMessage = "Invalid file type. Please select an image file: .jpg, .jpeg, .bmp, .gif or .png.";
                return;
            }
            var uploadsFolder = Path.Combine(Env.WebRootPath, "images");
            fileName = Guid.NewGuid().ToString() + Path.GetExtension(selectedFile.Name);
            filePath = Path.Combine(uploadsFolder, fileName);

            await using var createStream = new FileStream(filePath, FileMode.Create);
            await selectedFile.OpenReadStream(10485760).CopyToAsync(createStream);

            Image.Path = $"/images/{fileName}";
        }else
        {
            errorMessage = "Please select an image.";
        }
    }
    private async Task Save(MouseEventArgs e)
    {
        if (!string.IsNullOrEmpty(Image.Path))
        {
            await OnSave.InvokeAsync(Image);
            selectedFile = null;
            filePath = "";
            errorMessage = "Please select an image.";
        }
    }

}