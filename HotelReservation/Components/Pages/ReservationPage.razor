@page "/reservation"
@rendermode InteractiveServer
@using HotelReservation.Components.Models
@using HotelReservation.Data
@using Microsoft.AspNetCore.Identity
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext;

<div class="container mt-4">
    <h3 class="mb-4">Make a Reservation</h3>

    <div class="d-flex gap-3 mb-4">
        <button @onclick="() => ToggleReservation(true)" disabled="@reservingForSelf" class="btn btn-outline-primary">Reserve for Yourself</button>
        <button @onclick="() => ToggleReservation(false)" disabled="@( !reservingForSelf )" class="btn btn-outline-secondary">Reserve for Someone Else</button>
    </div>

    @if (!isConfirming)
    {
        <div class="card shadow-sm">
            <div class="card-body">
                @if (isAuthenticated && reservingForSelf)
                {
                    <p class="mb-1"><strong>Logged in as:</strong> @userName</p>
                    <p class="mb-1"><strong>Email:</strong> @userEmail</p>
                    <p class="mb-3"><strong>Phone:</strong> @userPhone</p>

                    <div class="mb-3">
                        <label class="form-label">Special Requests (Optional):</label>
                        <textarea class="form-control" @bind="requestMessage"></textarea>
                    </div>

                    <button @onclick="ShowConfirmation" class="btn btn-success w-100">Confirm Reservation</button>
                }
                else if (!isAuthenticated && reservingForSelf)
                {
                    <div class="alert alert-warning" role="alert">
                        Please <a href="Account/Login">log in</a> to make a reservation for yourself.
                    </div>
                }
                else
                {
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" @bind-value="guestName" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" @bind-value="guestEmail" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Phone</label>
                        <input type="tel" class="form-control" @bind-value="guestPhone" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Special Requests (Optional)</label>
                        <textarea class="form-control" @bind="requestMessage"></textarea>
                    </div>

                    <button @onclick="ShowConfirmation" class="btn btn-success w-100">Confirm Reservation</button>
                }
            </div>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-body">
                <h5 class="card-title mb-3">Please confirm your reservation:</h5>

                <ul class="list-group list-group-flush mb-3">
                    <li class="list-group-item"><strong>Room:</strong> @roomName</li>
                    <li class="list-group-item"><strong>Adults:</strong> @adults</li>
                    <li class="list-group-item"><strong>Kids:</strong> @kids</li>
                    <li class="list-group-item"><strong>From:</strong> @reservationBegin.ToShortDateString()</li>
                    <li class="list-group-item"><strong>To:</strong> @reservationEnd.ToShortDateString()</li>
                    <li class="list-group-item"><strong>Price:</strong> $@price</li>
                    @if (reservingForSelf)
                    {
                        <li class="list-group-item"><strong>Name:</strong> @userName</li>
                        <li class="list-group-item"><strong>Email:</strong> @userEmail</li>
                        <li class="list-group-item"><strong>Phone:</strong> @userPhone</li>
                    }
                    else
                    {
                        <li class="list-group-item"><strong>Name:</strong> @guestName</li>
                        <li class="list-group-item"><strong>Email:</strong> @guestEmail</li>
                        <li class="list-group-item"><strong>Phone:</strong> @guestPhone</li>
                    }

                    @if (!string.IsNullOrWhiteSpace(requestMessage))
                    {
                        <li class="list-group-item"><strong>Special Requests:</strong> @requestMessage</li>
                    }
                </ul>
                <div class="d-flex justify-content-between">
                    <button @onclick="ConfirmReservationAsync" class="btn btn-success w-100 me-2">Yes, everything is correct</button>
                    <button @onclick="() => isConfirming = false" class="btn btn-outline-secondary w-100 ms-2">Go Back</button>
                </div>
            </div>
        </div>
    }
</div>


@code {
    private int roomId;
    private string roomName = "";
    private int adults;
    private int kids;
    private DateTime reservationBegin;
    private DateTime reservationEnd;
    private int price;

    private bool isAuthenticated;
    private bool reservingForSelf = true;
    private bool isConfirming = false;

    private string? userName;
    private string? userEmail;
    private string? userPhone;

    private string guestName = "";
    private string guestEmail = "";
    private string guestPhone = "";
    private string requestMessage = "";

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        roomId = int.Parse(query.Get("room"));
        roomName = DbContext.RoomTemplates.First(t => t.Id == roomId).Name;
        adults = int.Parse(query.Get("adults"));
        kids = int.Parse(query.Get("kids"));
        reservationBegin = DateTime.Parse(query.Get("start"));
        reservationEnd = DateTime.Parse(query.Get("end"));
        price = int.Parse(query.Get("price"));

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity?.IsAuthenticated == true;

        if (isAuthenticated)
        {
            var appUser = await UserManager.GetUserAsync(user);
            userName = appUser?.FullName;
            userEmail = appUser?.Email;
            userPhone = appUser?.PhoneNumber;
        }
    }

    private void ToggleReservation(bool forSelf)
    {

        reservingForSelf = forSelf;
    }

    private void ShowConfirmation()
    {
        if (reservingForSelf && !isAuthenticated)
        {
            Navigation.NavigateTo("Account/Login");
            return;
        }

        isConfirming = true;
    }

    private async Task ConfirmReservationAsync()
    {
        if (isAuthenticated && reservingForSelf)
        {
            await DbContext.Reservations.AddAsync(new Reservation()
            {
                Room = DbContext.Rooms.First(r => r.Type.Id == roomId && 
                    !r.Reservations.Any(res => 
                        (reservationBegin >= res.Begin && reservationBegin < res.End) || 
                        (reservationEnd > res.Begin && reservationEnd <= res.End) || 
                        (reservationBegin < res.Begin && reservationEnd > res.End))),
                UserName = userName,
                UserEmail = userEmail,
                UserPhone = userPhone,
                Begin = reservationBegin,
                End = reservationEnd,
                AdultsNumber = adults,
                ChildrenNumber = kids,
                Request = requestMessage
            });
        }else if (!reservingForSelf)
        {
            await DbContext.Reservations.AddAsync(new Reservation()
            {
                Room = DbContext.Rooms.First(r => r.Type.Id == roomId && 
                    !r.Reservations.Any(res => 
                        (reservationBegin >= res.Begin && reservationBegin < res.End) || 
                        (reservationEnd > res.Begin && reservationEnd <= res.End) || 
                        (reservationBegin < res.Begin && reservationEnd > res.End))),
                UserName = guestName,
                UserEmail = guestEmail,
                UserPhone = guestPhone,
                Begin = reservationBegin,
                End = reservationEnd,
                AdultsNumber = adults,
                ChildrenNumber = kids,
                Request = requestMessage
            });
        }else
        {
            return;
        }
        await DbContext.SaveChangesAsync();
        Navigation.NavigateTo("");
    }
}
