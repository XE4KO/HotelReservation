@page "/room-template-config"
@rendermode InteractiveServer
@using HotelReservation.Components.Models
@using HotelReservation.Data
@using System.Threading.Channels
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel
@inject ApplicationDbContext DbContext;

<h3>Rooms</h3>
<br>

<div class="nav-links">
    <button @onclick="SwitchCreateRoomTemplate">create room</button>

    @if (_createRoomTemplate)
    {
        <RoomTemplateComponent Template=@NewTemplate() Mode="Create" OnSave="AddRoomTemplateAsync" />
    }
    @if (_roomTemplates == null)
    {
        <div>Loading...</div>
    }
    else
    {
        <div>
            @foreach (RoomTemplate template in _roomTemplates)
            {
                <RoomTemplateOverview Template=template>
                    <button @onclick=@(() => EditTemplate(template))>&#x270E;</button>
                    <button @onclick=@(() => DeleteTemplateAsync(template))>&#x2716;</button>
                </RoomTemplateOverview>
                if (template == _editTemplate)
                {
                    <RoomTemplateComponent Template=@template Mode="Save" OnSave="UpdateRoomTemplateAsync" />
                }
            }
        </div>
    }


</div>

@code {
    bool _createRoomTemplate = false;
    RoomTemplate? _editTemplate;
    List<RoomTemplate> _roomTemplates = new List<RoomTemplate>();
    private RoomTemplate NewTemplate() => new Models.RoomTemplate() { Adults = 0, Name = "New_template", NightlyPrice = 0, Kids = 0 };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshTemplates();
            StateHasChanged();
        }
        await base.OnInitializedAsync();
    }

    protected async Task RefreshTemplates()
        => _roomTemplates = await GetAllRoomTemplatesAsync();

    protected void SwitchCreateRoomTemplate()
    {
        _createRoomTemplate = !_createRoomTemplate;
        _editTemplate = null;
    }

    protected async Task AddRoomTemplateAsync(Models.RoomTemplate template)
    {
        await DbContext.RoomTemplates.AddAsync(template);
        await DbContext.SaveChangesAsync();
        await RefreshTemplates();
        _createRoomTemplate = false;
    }

    protected Task<List<RoomTemplate>> GetAllRoomTemplatesAsync()
        => DbContext.RoomTemplates.ToListAsync();

    protected void EditTemplate(RoomTemplate template)
    {
        if (_editTemplate == template)
        {
            _editTemplate = null;
        }
        else
        {
            _editTemplate = template;
        }
        _createRoomTemplate = false;
    }

    protected async Task DeleteTemplateAsync(RoomTemplate template)
    {
        DbContext.RoomTemplates.Remove(template);
        await DbContext.SaveChangesAsync();
        _roomTemplates.Remove(template);
        StateHasChanged();
    }

    protected async Task UpdateRoomTemplateAsync(Models.RoomTemplate template)
    {
        DbContext.RoomTemplates.Update(template);
        await DbContext.SaveChangesAsync();
        _editTemplate = null;
        StateHasChanged();
        _createRoomTemplate = false;
    }
}
