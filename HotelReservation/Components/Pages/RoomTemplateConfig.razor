@page "/room-template-config"
@rendermode InteractiveServer
@using HotelReservation.Components.Models
@using HotelReservation.Data
@using Microsoft.EntityFrameworkCore
@using System.Threading.Channels
@using System.ComponentModel
@using System.Collections
@inject ApplicationDbContext DbContext;

<h3>Room Templates</h3>
<br>
@if (!isLoading)
{
    <div>
        <button @onclick="SwitchCreateRoomTemplate">create room template</button>

        @if (createRoomTemplate)
        {
            <RoomTemplateComponent Template=@NewTemplate() Tags="AllTags" Mode="Create" OnSave="AddRoomTemplateAsync" />
        }
        @if (roomTemplates == null)
        {
            <div>Loading...</div>
        }
        else
        {
            <div>
                @foreach (RoomTemplate template in roomTemplates)
                {
                    <RoomTemplateOverview Template=template>
                        <button @onclick=@(() => EditTemplate(template))>&#x270E;</button>
                        <button @onclick=@(() => DeleteTemplateAsync(template))>&#x2716;</button>
                    </RoomTemplateOverview>
                    if (editTemplate != null && template.Id == editTemplate.Id)
                    {
                        <RoomTemplateComponent Template=@editTemplate Tags="AllTags" Mode="Save" OnSave="UpdateRoomTemplateAsync" />
                    }
                }
            </div>
        }
    </div>
}else
{
    <span>Loading...</span>
}

@code {
    bool createRoomTemplate = false;
    private bool isLoading = true;
    RoomTemplate? editTemplate;
    List<RoomTemplate> roomTemplates = new();
    private async Task<List<Tag>> AllTags() => await DbContext.Tags.ToListAsync();
    private RoomTemplate NewTemplate() => new RoomTemplate() { Adults = 0, Name = "New_template", NightlyPrice = 0, Kids = 0, Tags = new List<Tag>(), Images = new List<Image>() };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshTemplates();
            isLoading = false;
            StateHasChanged();
        }
        await base.OnInitializedAsync();
    }

    protected async Task RefreshTemplates()
        => roomTemplates = await GetAllRoomTemplatesAsync();

    protected void SwitchCreateRoomTemplate()
    {
        createRoomTemplate = !createRoomTemplate;
        editTemplate = null;
    }

    protected async Task AddRoomTemplateAsync(RoomTemplate template)
    {
        // List<Tag> tagsToAttach = new();
        // foreach (var templateTag in template.Tags)
        // {
        //     var localTag = DbContext.Tags.Local.FirstOrDefault(t => t.Id == templateTag.Id);
        //     if (localTag != null)
        //     {
        //         tagsToAttach.Add(localTag);
        //     }
        //     else
        //     {
        //         var existingTag = await DbContext.Tags.AsNoTracking().FirstAsync(t => t.Id == templateTag.Id);
        //         DbContext.Attach(existingTag);
        //         tagsToAttach.Add(existingTag);
        //     }
        // }
        // template.Tags = tagsToAttach;
        // foreach (var tag in template.Tags)
        // {
        //     DbContext.Attach(tag);
        // }
        await DbContext.RoomTemplates.AddAsync(template);
        await DbContext.SaveChangesAsync();
        await RefreshTemplates();
        createRoomTemplate = false;
    }

    protected Task<List<RoomTemplate>> GetAllRoomTemplatesAsync()
        => DbContext.RoomTemplates.ToListAsync();

    protected async Task EditTemplate(RoomTemplate selectedTemplate)
    {
        await DbContext.SaveChangesAsync();
        if (editTemplate == selectedTemplate)
        {
            editTemplate = null;
        }
        else
        {
            editTemplate = await DbContext.RoomTemplates.Include(t => t.Tags).Include(t => t.Images).FirstOrDefaultAsync(t => t.Id == selectedTemplate.Id);
            if (editTemplate.Tags == null)
            {
                editTemplate.Tags = new List<Tag>();
            }
            if (editTemplate.Images == null)
            {
                editTemplate.Images = new List<Image>();
            }
        }
        createRoomTemplate = false;
    }

    protected async Task DeleteTemplateAsync(RoomTemplate template)
    {
        DbContext.RoomTemplates.Remove(template);
        await DbContext.SaveChangesAsync();
        roomTemplates.Remove(template);
        StateHasChanged();
    }

    protected async Task UpdateRoomTemplateAsync(RoomTemplate template)
    {

        DbContext.RoomTemplates.Update(template);
        await DbContext.SaveChangesAsync();
        editTemplate = null;
        StateHasChanged();
        createRoomTemplate = false;
    }
}
